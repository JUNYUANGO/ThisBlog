---
import SunIcon from '@/components/icons/SunIcon'
import MoonIcon from '@/components/icons/MoonIcon'
---

<!-- Define the themeToggle custom element -->
<theme-toggle class='relative h-6 w-6'>
	<button id='toggle-theme' class='group' aria-pressed='false'>
		<span class='absolute left-0 right-0 top-0 opacity-0 group-aria-pressed:opacity-100'>
			<SunIcon />
		</span>

		<span class='absolute left-0 right-0 top-0 opacity-0 group-aria-[pressed=false]:opacity-100'>
			<MoonIcon />
		</span>
	</button>
</theme-toggle>

<script>
	class themeToggle extends HTMLElement {
		connectedCallback() {
			const themeButton = this.querySelector('button')

			// Read and apply the theme state from localStorage
			const savedTheme = localStorage.getItem('theme')
			const isDarkMode = savedTheme === 'dark'
			document.documentElement.classList.toggle('dark', isDarkMode)
			themeButton.setAttribute('aria-pressed', String(isDarkMode))

			if (themeButton) {
				themeButton.addEventListener('click', () => {
					const isPressed = themeButton.getAttribute('aria-pressed') === 'true'
					const newTheme = !isPressed ? 'dark' : 'light'
					themeButton.setAttribute('aria-pressed', String(!isPressed))

					// Save the new theme state to localStorage
					localStorage.setItem('theme', newTheme)

					// Dispatch custom event for theme change
					const themeChangeEvent = new CustomEvent('theme-change', {
						detail: { theme: newTheme }
					})
					document.dispatchEvent(themeChangeEvent)

					// Optionally toggle a class on the <html> element
					document.documentElement.classList.toggle('dark', newTheme === 'dark')
				})
			}
		}
	}

	customElements.define('theme-toggle', themeToggle)
</script>

<script is:inline>
	// Initialize button state based on the current theme
	window.addEventListener('DOMContentLoaded', () => {
		const button = document.getElementById('toggle-theme')
		const bodyThemeIsDark = document.documentElement.classList.contains('dark')
		button.setAttribute('aria-pressed', String(bodyThemeIsDark))
	})
</script>
